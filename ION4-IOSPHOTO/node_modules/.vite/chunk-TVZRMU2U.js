var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __markAsModule = (target) => __defProp(target, "__esModule", { value: true });
var __esm = (fn, res) => function __init() {
  return fn && (res = (0, fn[Object.keys(fn)[0]])(fn = 0)), res;
};
var __commonJS = (cb, mod) => function __require() {
  return mod || (0, cb[Object.keys(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
};
var __reExport = (target, module, desc) => {
  if (module && typeof module === "object" || typeof module === "function") {
    for (let key of __getOwnPropNames(module))
      if (!__hasOwnProp.call(target, key) && key !== "default")
        __defProp(target, key, { get: () => module[key], enumerable: !(desc = __getOwnPropDesc(module, key)) || desc.enumerable });
  }
  return target;
};
var __toModule = (module) => {
  return __reExport(__markAsModule(__defProp(module != null ? __create(__getProtoOf(module)) : {}, "default", module && module.__esModule && "default" in module ? { get: () => module.default, enumerable: true } : { value: module, enumerable: true })), module);
};

// <define:process.env>
var ELECTRON_RUN_AS_NODE, USER, __CFBundleIdentifier, COMMAND_MODE, LOGNAME, PATH, SSH_AUTH_SOCK, SHELL, HOME, __CF_USER_TEXT_ENCODING, TMPDIR, XPC_SERVICE_NAME, XPC_FLAGS, ORIGINAL_XDG_CURRENT_DESKTOP, VSCODE_CWD, VSCODE_NLS_CONFIG, VSCODE_NODE_CACHED_DATA_DIR, VSCODE_IPC_HOOK, VSCODE_PID, SHLVL, PWD, OLDPWD, _, VSCODE_AMD_ENTRYPOINT, VSCODE_PIPE_LOGGING, VSCODE_VERBOSE_LOGGING, VSCODE_LOG_NATIVE, VSCODE_IPC_HOOK_EXTHOST, VSCODE_HANDLES_UNCAUGHT_ERRORS, VSCODE_LOG_STACK, APPLICATION_INSIGHTS_NO_DIAGNOSTIC_CHANNEL, WALLABY_PRODUCTION, ELECTRON_NO_ASAR, RESOLVE_CWD, define_process_env_default;
var init_define_process_env = __esm({
  "<define:process.env>"() {
    ELECTRON_RUN_AS_NODE = "1";
    USER = "tm";
    __CFBundleIdentifier = "com.microsoft.VSCode";
    COMMAND_MODE = "unix2003";
    LOGNAME = "tm";
    PATH = "/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:/Library/Apple/usr/bin";
    SSH_AUTH_SOCK = "/private/tmp/com.apple.launchd.VvPYgcODIw/Listeners";
    SHELL = "/bin/zsh";
    HOME = "/Users/tm";
    __CF_USER_TEXT_ENCODING = "0x1F5:0:2";
    TMPDIR = "/var/folders/rn/jl83jnzn3yx1m4vf7hm2vsdr0000gn/T/";
    XPC_SERVICE_NAME = "application.com.microsoft.VSCode.21392475.21392481";
    XPC_FLAGS = "0x0";
    ORIGINAL_XDG_CURRENT_DESKTOP = "undefined";
    VSCODE_CWD = "/";
    VSCODE_NLS_CONFIG = '{"locale":"en-gb","availableLanguages":{},"_languagePackSupport":true}';
    VSCODE_NODE_CACHED_DATA_DIR = "/Users/tm/Library/Application Support/Code/CachedData/507ce72a4466fbb27b715c3722558bb15afa9f48";
    VSCODE_IPC_HOOK = "/Users/tm/Library/Application Support/Code/1.57.1-main.sock";
    VSCODE_PID = "47210";
    SHLVL = "0";
    PWD = "/";
    OLDPWD = "/";
    _ = "/Applications/Visual Studio Code.app/Contents/MacOS/Electron";
    VSCODE_AMD_ENTRYPOINT = "vs/workbench/services/extensions/node/extensionHostProcess";
    VSCODE_PIPE_LOGGING = "true";
    VSCODE_VERBOSE_LOGGING = "true";
    VSCODE_LOG_NATIVE = "false";
    VSCODE_IPC_HOOK_EXTHOST = "/var/folders/rn/jl83jnzn3yx1m4vf7hm2vsdr0000gn/T/vscode-ipc-adbc4b5a-1938-48fe-90e3-f1942b07f6da.sock";
    VSCODE_HANDLES_UNCAUGHT_ERRORS = "true";
    VSCODE_LOG_STACK = "false";
    APPLICATION_INSIGHTS_NO_DIAGNOSTIC_CHANNEL = "true";
    WALLABY_PRODUCTION = "true";
    ELECTRON_NO_ASAR = "1";
    RESOLVE_CWD = "/Users/tm/Documents/CODE/ION/ION4-IOSPHOTO";
    define_process_env_default = { ELECTRON_RUN_AS_NODE, USER, __CFBundleIdentifier, COMMAND_MODE, LOGNAME, PATH, SSH_AUTH_SOCK, SHELL, HOME, __CF_USER_TEXT_ENCODING, TMPDIR, XPC_SERVICE_NAME, XPC_FLAGS, ORIGINAL_XDG_CURRENT_DESKTOP, VSCODE_CWD, VSCODE_NLS_CONFIG, VSCODE_NODE_CACHED_DATA_DIR, VSCODE_IPC_HOOK, VSCODE_PID, SHLVL, PWD, OLDPWD, _, VSCODE_AMD_ENTRYPOINT, VSCODE_PIPE_LOGGING, VSCODE_VERBOSE_LOGGING, VSCODE_LOG_NATIVE, VSCODE_IPC_HOOK_EXTHOST, VSCODE_HANDLES_UNCAUGHT_ERRORS, VSCODE_LOG_STACK, APPLICATION_INSIGHTS_NO_DIAGNOSTIC_CHANNEL, WALLABY_PRODUCTION, ELECTRON_NO_ASAR, RESOLVE_CWD };
  }
});

export {
  __commonJS,
  __toModule,
  init_define_process_env,
  define_process_env_default
};
//# sourceMappingURL=chunk-TVZRMU2U.js.map
